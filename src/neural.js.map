{"version":3,"sources":["../../src/neural.js"],"names":[],"mappings":"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","file":"neural.js","sourcesContent":["\nimport './src/ImageLoader_Overwrite.js'\n\nimport * as Loaders from './src/Loaders.js';\n\n\nPromise.all([\n  Loaders.CacheJSON('events.json')\n]).then(function() {\n\n  var categories = {\n    \"Drought\": {\n      id: 0,\n      color: 'rgb(255, 0, 0)'\n    },\n    \"Dust and Haze\": {\n      id: 1,\n      color: 'rgb(100, 10, 10)'\n    },\n    \"Earthquakes\": {\n      id: 2,\n      color: 'rgb(10, 150, 10)'\n    },\n    \"Flood\": {\n      id: 3,\n      color: 'rgb(10, 0, 255)'\n    },\n    \"Floods\": {\n      id: 3,\n      color: 'rgb(10, 0, 255)'\n    },\n    \"Landslides\": {\n      id: 4,\n      color: 'rgb(150, 150, 10)'\n    },\n    \"Manmade\": {\n      id: 5,\n      color: 'rgb(0, 0, 0)'\n    },\n    \"Sea and Lake Ice\": {\n      id: 6,\n      color: 'rgb(225, 225, 255)'\n    },\n    \"Severe Storms\": {\n      id: 7,\n      color: 'rgb(70, 70, 70)'\n    },\n    \"Snow\": {\n      id: 8,\n      color: 'rgb(255, 255, 255)'\n    },\n    \"Temperature Extremes\": {\n      id: 9,\n      color: 'rgb(10, 150, 10)'\n    },\n    \"Volcanoes\": {\n      id: 10,\n      color: 'rgb(200, 0, 0)'\n    },\n    \"Water Color\": {\n      id: 11,\n      color: 'rgb(0, 50, 200)'\n    },\n    \"Wildfires\": {\n      id: 12,\n      color: 'rgb(255, 0, 0)'\n    },\n    \"None\": {\n      id: 13,\n      color: 'rgb(0, 0, 0)'\n    }\n  }\n\n  var idToCategories = [];\n  for (var i in categories) { idToCategories[categories[i].id] = categories[i]; }\n\n  var canvas = document.getElementById(\"neural\");\n  var ctx = canvas.getContext('2d');\n\n  var width = canvas.width;\n  var height = canvas.height;\n\n  function drawRect(x, y, w, h, color){\n    ctx.fillStyle = color;\n    ctx.beginPath();\n    ctx.rect(x,y,w,h);\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n  }\n\n  function drawCircle(x, y, r, color){\n    ctx.fillStyle = color;\n    ctx.beginPath();\n    ctx.arc(x, y, r, 0, Math.PI*2, true); \n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n  }\n\n  function latLongToXY(latitude, longitude, width, height) {\n    var x = (longitude+180)/360*width;\n    var y = (-latitude+90)/180*height;\n\n    return {x: x, y: y};\n  }\n\n  // Initialize Neural Network\n\n  var neuralNet = new convnetjs.Net();\n\n  var layer = [];\n  layer.push({type:'input', out_sx:1, out_sy:1, out_depth:2});\n  layer.push({type:'fc', num_neurons:6, activation: 'sigmoid'});\n  layer.push({type:'fc', num_neurons:2, activation: 'sigmoid'});\n  // layer.push({type:'fc', num_neurons:2, activation: 'sigmoid'});\n  layer.push({type:'softmax', num_classes:idToCategories.length});\n\n  neuralNet.makeLayers(layer);\n\n  var trainer = new convnetjs.SGDTrainer(neuralNet, {\n    learning_rate: 0.01,\n    momentum: 0.1,\n    batch_size: 10,\n    l2_decay: 0.001\n  });\n\n  var neuralData = [];\n  var neuralLabels = [];\n  var neuralDataToCompare = []; // clone of neuralData\n\n  var scale = 20;\n\n  // Load in data\n  var i = 0;\n  var data = Loaders.getJSON('events.json');\n  for (var event of data) {\n    // var coords;\n\n    // if (event.geometries[0].type == \"Point\") {\n\n    //   coords = event.geometries[0].coordinates;\n    // } else {\n    //   coords = event.geometries[0].coordinates[0][0];\n    // }\n\n    var coords = [event.longitude, event.latitude];\n\n    var realPos2D = latLongToXY(coords[1], coords[0], width, height);\n    // for (var r = 0; r < 5; r++) {\n    //   var pos2D = {\n    //     x: realPos2D.x + (Math.random()-0.5)*(width/10),\n    //     y: realPos2D.y + (Math.random()-0.5)*(height/10)\n    //   }\n    //   drawCircle(pos2D.x, pos2D.y, 5, categories[event.category].color);\n\n    //   neuralData.push([pos2D.x/width*6 - 0.5, pos2D.y/height*6 - 0.5]);\n    //   neuralDataToCompare.push(neuralData[neuralData.length-1]);\n    //   neuralLabels.push(categories[event.category].id); \n    // }\n\n      drawCircle(realPos2D.x, realPos2D.y, 5, categories[event.category].color);\n\n    neuralData.push([realPos2D.x/width*6 - 0.5, realPos2D.y/height*6 - 0.5]);\n    neuralDataToCompare.push(neuralData[neuralData.length-1]);\n    neuralLabels.push(categories[event.category].id); \n    i++;\n  }\n\n  // Fill in data for areas without points\n  for (var y = 0; y <= 10; y++) {\n    xLoop:\n    for (var x = 0; x <= 10; x++) {\n      var _x = x/10*6 - 0.5;\n      var _y = y/10*6 - 0.5;\n\n      for (var i = 0; i < neuralDataToCompare.length; i++) {\n        var pos = neuralDataToCompare[i];\n        var dist = Math.sqrt(Math.pow(pos[0]-_x, 2) + Math.pow(pos[1]-_y, 2))\n        if (dist < 0.4) {\n          continue xLoop;\n        }\n      }\n\n      neuralData.push([_x, _y]);\n      neuralLabels.push(13); \n\n      drawCircle(x/10 * width, y/10 * height, 5, 'rgb(0,0,0)')\n    }\n  }\n\n  // // Fill in data for areas without points\n  // for (var y = 0; y < 20; y++) {\n  //   xLoop:\n  //   for (var x = 0; x < 20; x++) {\n  //     var _x = x/20*6 - 0.5;\n  //     var _y = y/20*6 - 0.5;\n\n  //     for (var i = 0; i < neuralDataToCompare.length; i++) {\n  //       var pos = neuralDataToCompare[i];\n  //       var dist = Math.sqrt(Math.pow(pos[0]-_x, 2) + Math.pow(pos[1]-_y, 2))\n  //       if (dist < 1) {\n  //         continue xLoop;\n  //       }\n  //     }\n\n  //     neuralData.push([_x, _y]);\n  //     neuralLabels.push(13); \n\n  //     drawCircle(x/20 * width, y/20 * height, 5, 'rgb(0,0,0)');\n  //   }\n  // }\n\n\n  // return;\n\n  function yo() {\n    return Loaders.CacheJSON(\"./neuralNet.json\")\n    .then(function(data) {\n\n      neuralNet.fromJSON(data);\n\n      var netx = new convnetjs.Vol(1,1,neuralData.length);\n\n      // draw neural network\n      for(var x=0; x<=width; x+= scale) {\n        for(var y=0; y<=height; y+= scale) {\n          netx.w[0] = x/width*6-0.5;\n          netx.w[1] = y/height*6-0.5;\n          var a = neuralNet.forward(netx, false);\n\n          // go through weights and see which weight is highest\n          var curI = -1;\n          var curWeight = -1;\n\n          for (var j = 0; j < a.w.length; j++) {\n            var weight = a.w[j];\n            if (weight > curWeight) {\n              curWeight = weight;\n              curI = j;\n            }\n          }\n\n          var type = curI;\n\n          ctx.fillStyle = idToCategories[type].color;\n          ctx.fillRect(x, y, scale, scale);\n        }\n      }\n\n      for(var i = 0; i < neuralData.length; i++) {\n        drawCircle((neuralData[i][0]+0.5)/6*width, (neuralData[i][1]+0.5)/6*height, 5, idToCategories[neuralLabels[i]].color);\n      }\n\n      setTimeout(() => yo(), 100);\n\n    });\n  }\n\n  yo();\n\n});\n"]}
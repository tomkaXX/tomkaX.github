{"version":3,"sources":["../../src/stringSimularity.js"],"names":[],"mappings":";;;;;;AAAA,QAAI,cAAc,UAAS,GAAT,EAAc,GAAd,EAAkB;;;;;;;;;;;;;;;;;AAkBhC,YAAI,KAAK,IAAI,OAAJ,CAAY,KAAZ,EAAmB,EAAnB,EAAuB,WAAvB,EAAT;AACA,YAAI,KAAK,IAAI,OAAJ,CAAY,KAAZ,EAAmB,EAAnB,EAAuB,WAAvB,EAAT;;AAEA,iBAAS,SAAT,CAAmB,IAAnB,EAAyB,IAAzB,EAA+B;;;;;AAK3B,gBAAI,IAAI,EAAR;gBAAY,IAAI,EAAhB;gBAAoB,IAAI,KAAK,MAA7B;gBAAqC,CAArC;gBAAwC,CAAxC;AACA,iBAAK,IAAI,CAAT,EAAY,IAAI,CAAhB,EAAmB,GAAnB,EAAwB;AACpB,kBAAE,KAAK,CAAL,CAAF,IAAa,IAAb;AACH;AACD,gBAAI,KAAK,MAAT;AACA,iBAAK,IAAI,CAAT,EAAY,IAAI,CAAhB,EAAmB,GAAnB,EAAwB;AACpB,oBAAI,KAAK,CAAL,CAAJ;AACA,oBAAI,KAAK,CAAT,EAAY;AACR,sBAAE,IAAF,CAAO,CAAP;AACH;AACJ;AACD,mBAAO,CAAP;AACH;;AAED,YAAI,QAAQ,UAAS,CAAT,EAAW;;AAEnB,gBAAI,QAAQ,EAAZ;AACA,iBAAI,IAAI,IAAI,CAAZ,EAAe,IAAI,EAAE,MAAF,GAAW,CAA9B,EAAiC,GAAjC,EAAqC;AACjC,sBAAM,CAAN,IAAW,EAAE,KAAF,CAAQ,CAAR,EAAW,IAAE,CAAb,CAAX;AACH;AACD,mBAAO,KAAP;AACH,SAPD;;AASA,YAAI,iBAAiB,IAAI,UAAU,MAAM,EAAN,CAAV,EAAqB,MAAM,EAAN,CAArB,EAAgC,MAAzD;AACA,YAAI,iBAAiB,MAAM,EAAN,EAAU,MAAV,GAAmB,MAAM,EAAN,EAAU,MAAlD;AACA,YAAI,aAAa,iBAAiB,cAAlC;AACA,eAAO,UAAP;AACH,KArDD;;sBAuDe,W","file":"stringSimularity.js","sourcesContent":["var sSimilarity = function(sa1, sa2){\n    // Compare two strings to see how similar they are.\n    // Answer is returned as a value from 0 - 1\n    // 1 indicates a perfect similarity (100%) while 0 indicates no similarity (0%)\n    // Algorithm is set up to closely mimic the mathematical formula from\n    // the article describing the algorithm, for clarity. \n    // Algorithm source site: http://www.catalysoft.com/articles/StrikeAMatch.html\n    // (Most specifically the slightly cryptic variable names were written as such\n    // to mirror the mathematical implementation on the source site)\n    //\n    // 2014-04-03\n    // Found out that the algorithm is an implementation of the Sørensen–Dice coefficient [1]\n    // [1] http://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient\n    //\n    // The algorithm is an n-gram comparison of bigrams of characters in a string\n\n\n    // for my purposes, comparison should not check case or whitespace\n    var s1 = sa1.replace(/\\s/g, \"\").toLowerCase();\n    var s2 = sa2.replace(/\\s/g, \"\").toLowerCase();\n    \n    function intersect(arr1, arr2) {\n        // I didn't write this.  I'd like to come back sometime\n        // and write my own intersection algorithm.  This one seems\n        // clean and fast, though.  Going to try to find out where\n        // I got it for attribution.  Not sure right now.\n        var r = [], o = {}, l = arr2.length, i, v;\n        for (i = 0; i < l; i++) {\n            o[arr2[i]] = true;\n        }\n        l = arr1.length;\n        for (i = 0; i < l; i++) {\n            v = arr1[i];\n            if (v in o) {\n                r.push(v);\n            }\n        }\n        return r;\n    }\n    \n    var pairs = function(s){\n        // Get an array of all pairs of adjacent letters in a string\n        var pairs = [];\n        for(var i = 0; i < s.length - 1; i++){\n            pairs[i] = s.slice(i, i+2);\n        }\n        return pairs;\n    }    \n    \n    var similarity_num = 2 * intersect(pairs(s1), pairs(s2)).length;\n    var similarity_den = pairs(s1).length + pairs(s2).length;\n    var similarity = similarity_num / similarity_den;\n    return similarity;\n};\n\nexport default sSimilarity;"]}
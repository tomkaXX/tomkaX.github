{"version":3,"sources":["../../src/NeuralComputation.js"],"names":[],"mappings":"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","file":"NeuralComputation.js","sourcesContent":["'use strict'\n\nvar CategoryColors = require('./CategoryColors.js');\n\nmodule.exports = class NeuralComputation {\n  constructor(convnetjs, events, sections) {\n    this.events = events;\n    this.sections = sections;\n    this.convnetjs = convnetjs;\n\n    this.classes = CategoryColors.idToCategories.length;\n\n    this.iterations = 50; // how many times to train\n    this.width = 512;\n    this.height = 512;\n\n    this.neuralNets = [];\n    this.trainers = [];\n    this.sectionPoints = [];\n\n    for (var i in this.sections) {\n      this.neuralNets[i] = new this.convnetjs.Net();\n      this.createLayer(this.neuralNets[i]);\n      this.trainers[i] = this.createTrainer(this.neuralNets[i]);\n      this.sectionPoints[i] = [];\n    }\n\n    // Fill up points for each section\n    for (var event of events) {\n      if (event.category == \"None\") {\n        continue;\n      }\n\n      for (var i in this.sections) {\n        var section = this.sections[i];\n        if (\n          event.longitude > section.topLeft.longitude &&\n          event.longitude < section.bottomRight.longitude &&\n          event.latitude < section.topLeft.latitude &&\n          event.latitude > section.bottomRight.latitude\n        ) {\n          this.sectionPoints[i].push({category: event.category, longitude: event.longitude, latitude: event.latitude});\n        }\n      }\n\n    }\n\n  }\n\n  createLayer(neuralNet) {  \n    var layer = [];\n    layer.push({type: 'input', out_sx: 1, out_sy: 1, out_depth: 2});\n    layer.push({type: 'fc', num_neurons: 13, activation: 'sigmoid'});\n    layer.push({type: 'fc', num_neurons: 13, activation: 'sigmoid'});\n    layer.push({type: 'softmax', num_classes: this.classes});\n    neuralNet.makeLayers(layer);\n  }\n\n  createTrainer(neuralNet) {\n    var trainer = new this.convnetjs.SGDTrainer(neuralNet, {\n      learning_rate: 0.01,\n      momentum: 0.1,\n      batch_size: 10,\n      l2_decay: 0.001\n    });\n    return trainer;\n  }\n\n  latLongToXY(latitude, longitude, width, height) {\n    var x = (longitude+180)/360*width;\n    var y = (-latitude+90)/180*height;\n\n    return {x: x, y: y};\n  }\n\n  train() {\n    for (var s in this.sections) {\n      var section = this.sections[s];\n\n      var neuralData = [];\n      var neuralDataToCompare = [];\n      var neuralLabels = [];\n\n      var width = Math.abs(section.bottomRight.longitude - section.topLeft.longitude);\n      var height = Math.abs(section.bottomRight.latitude - section.topLeft.latitude);\n\n      var topLeft = this.latLongToXY(section.topLeft.latitude, section.topLeft.longitude, 1024, 1024);\n      var bottomRight = this.latLongToXY(section.bottomRight.latitude, section.bottomRight.longitude, 1024, 1024);\n\n      var canvasWidth = Math.abs(bottomRight.x - topLeft.x);\n      var canvasHeight = Math.abs(bottomRight.y - topLeft.y);\n\n      var points = this.sectionPoints[s];\n\n      for (var point of points) {\n        for (var r = 0; r < 5; r++) {\n          var pos = this.latLongToXY(\n            point.latitude + (Math.random()-0.5)*0,\n            point.longitude + (Math.random()-0.5)*0,\n            1024,\n            1024\n          );\n\n          // console.log(pos.x, pos.y, topLeft.x, topLeft.y, pos.x - topLeft.x - canvasWidth/2, pos.y - topLeft.y - canvasHeight/2);\n          // return;\n\n          neuralData.push([\n            ((pos.x - topLeft.x)/canvasWidth - 0.5)*6,\n            ((pos.y - topLeft.y)/canvasHeight - 0.5)*6\n          ]);\n\n          neuralDataToCompare.push(neuralData[neuralData.length-1])\n\n          neuralLabels.push(CategoryColors.categories[point.category].id);\n        }\n      }\n\n      // Fill in data for areas without points\n      for (var y = 0; y <= 10; y++) {\n        xLoop:\n        for (var x = 0; x <= 10; x++) {\n          var _x = (x/10 - 0.5)*6;\n          var _y = (y/10 - 0.5)*6;\n\n          for (var i = 0; i < neuralDataToCompare.length; i++) {\n            var pos = neuralDataToCompare[i];\n            var dist = Math.sqrt(Math.pow(pos[0]-_x, 2) + Math.pow(pos[1]-_y, 2))\n            if (dist < 0.4) {\n              continue xLoop;\n            }\n          }\n\n          neuralData.push([_x, _y]);\n          neuralLabels.push(13); \n        }\n      }\n\n      var neuralVolume = new this.convnetjs.Vol(1, 1, this.classes);\n      for(var iters = 0; iters < this.iterations; iters++) { // run this 500 times\n        for(var i = 0; i < neuralData.length; i++) {\n          neuralVolume.w = neuralData[i];\n          this.trainers[s].train(neuralVolume, neuralLabels[i]);\n        }\n      }\n    }\n  }\n\n  draw(canvas) {\n    var ctx = canvas.getContext('2d');\n\n    for (var s in this.sections) {\n      var section = this.sections[s];\n\n      var topLeft = this.latLongToXY(section.topLeft.latitude, section.topLeft.longitude, canvas.width, canvas.height);\n      var bottomRight = this.latLongToXY(section.bottomRight.latitude, section.bottomRight.longitude, canvas.width, canvas.height);\n\n      var canvasWidth = Math.abs(bottomRight.x - topLeft.x);\n      var canvasHeight = Math.abs(bottomRight.y - topLeft.y);\n\n      var netResult = new this.convnetjs.Vol(1,1,this.classes);\n\n      var segments = 1;\n\n      for (var x = topLeft.x; x < bottomRight.x; x+=segments) {\n        for (var y = topLeft.y; y < bottomRight.y; y+=segments) {\n          netResult.w[0] = ((x - topLeft.x)/canvasWidth - 0.5)*6;\n          netResult.w[1] = ((y - topLeft.y)/canvasHeight - 0.5)*6;\n          var a = this.neuralNets[s].forward(netResult, false);\n\n          // go through weights and see which weight is highest\n          var curI = -1;\n          var curWeight = -1;\n\n          for (var j = 0; j < a.w.length; j++) {\n            var weight = a.w[j];\n            if (weight > curWeight) {\n              curWeight = weight;\n              curI = j;\n            }\n          }\n\n          var type = curI;\n\n          if (type >= 0) {\n            ctx.fillStyle = this.rgb(CategoryColors.idToCategories[type].color);\n            ctx.fillRect(Math.floor(x), Math.floor(y), segments, segments);\n          }\n        }\n      }\n\n      // draw data points;\n      for(var point of this.sectionPoints[s]) {\n        var point2D = this.latLongToXY(point.latitude, point.longitude, canvas.width, canvas.height);\n        ctx.fillStyle = this.rgb(CategoryColors.categories[point.category].color);\n        ctx.beginPath();\n        ctx.arc(point2D.x, point2D.y, 5, 0, Math.PI*2, true); \n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n      }\n    }\n  }\n\n  save(width, height, cb) {\n\n    for (var x = 0; x < width; x++) {\n      for (var y = 0; y < height; y++) {\n        cb(x, y, 0, 0, 0);\n      }\n    }\n\n    for (var s in this.sections) {\n      var section = this.sections[s];\n\n      var topLeft = this.latLongToXY(section.topLeft.latitude, section.topLeft.longitude, width, height);\n      var bottomRight = this.latLongToXY(section.bottomRight.latitude, section.bottomRight.longitude, width, height);\n\n      var canvasWidth = Math.abs(bottomRight.x - topLeft.x);\n      var canvasHeight = Math.abs(bottomRight.y - topLeft.y);\n\n      var netResult = new this.convnetjs.Vol(1,1,this.classes);\n\n      var segments = 1;\n\n      for (var x = topLeft.x; x < bottomRight.x; x+=segments) {\n        for (var y = topLeft.y; y < bottomRight.y; y+=segments) {\n          netResult.w[0] = ((x - topLeft.x)/canvasWidth - 0.5)*6;\n          netResult.w[1] = ((y - topLeft.y)/canvasHeight - 0.5)*6;\n\n          var a = this.neuralNets[s].forward(netResult, false);\n\n          // go through weights and see which weight is highest\n          var curI = -1;\n          var curWeight = -1;\n\n          for (var j = 0; j < a.w.length; j++) {\n            var weight = a.w[j];\n            if (weight > curWeight) {\n              curWeight = weight;\n              curI = j;\n            }\n          }\n\n          var type = curI;\n\n          if (type >= 0) {\n            var color = CategoryColors.idToCategories[type].color;\n            cb(Math.floor(x), Math.floor(y), color[0], color[1], color[2]);\n          }\n        }\n      }\n    }\n  }\n\n  loadJson(json) {\n    console.log(json);\n    for (var i in json) {\n      console.log(this.sections[i]);\n      this.neuralNets[i].fromJSON(json[i]);\n    }\n  }\n\n  getJson() {\n    var json = [];\n    for (var i in this.neuralNets) {\n      json[i] = this.neuralNets[i].toJSON();\n    }\n\n    return JSON.stringify({out: json});\n  }\n\n  rgb(arr) {\n    return `rgb(${arr[0]},${arr[1]},${arr[2]})`;\n  }\n}\n"]}